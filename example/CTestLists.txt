###
#
#  @copyright 2017-2020 Bordeaux INP, CNRS (LaBRI UMR 5800), Inria,
#                       Univ. Bordeaux. All rights reserved.
#
#  @version 6.0.3
#  @author Mathieu Faverge
#  @date 2020-01-06
#
###
cmake_minimum_required (VERSION 3.3)
cmake_policy(SET CMP0054 NEW)

### CTest execution
set( PASTIX_DRIVERS
   # reentrant fails with Scotch parser !
  analyze simple step-by-step schur personal reentrant multidof old/old_simple old/old_step-by-step )
set( PASTIX_TESTS
  simple )
set( PASTIX_REFINE
  refinement )
set( PASTIX_FACTO
     0 1 2 ) # LLh, LDLt, LU
set( PASTIX_SCHEDS
     0 1 4 ) # sequential, static, dynamic
set( PASTIX_COMPRESS_METHOD
     svd
     pqrcp
     rqrcp
     tqrcp
     rqrrt )
set( PASTIX_SPLIT_METHOD
    not
    kway
    kwayprojections )
set( RUNTYPE shm )
set( PASTIX_ORDER )

set( _complex   c z )
set( _factodiag 1 3 4 )

# Add runtimes
if (PASTIX_WITH_PARSEC)
  list( APPEND PASTIX_SCHEDS 2 ) # parsec
endif (PASTIX_WITH_PARSEC)
if (PASTIX_WITH_STARPU)
  list( APPEND PASTIX_SCHEDS 3 ) # starpu
endif (PASTIX_WITH_STARPU)

# Add runtype
if( PASTIX_WITH_MPI )
  list( APPEND RUNTYPE mpi )
endif()

# Add orderings
if (PASTIX_ORDERING_SCOTCH)
  list( APPEND PASTIX_ORDER pastixorderscotch )
endif (PASTIX_ORDERING_SCOTCH)
if (PASTIX_ORDERING_METIS)
  list( APPEND PASTIX_ORDER pastixordermetis )
endif (PASTIX_ORDERING_METIS)

foreach( version ${RUNTYPE} )
  unset( exe )
  if( version STREQUAL "shm" )
    set( exe "")
  endif()
  if( version STREQUAL "mpi" )
    set( exe mpiexec -n 4 )
  endif()

  ### All drivers with Laplacian and default parameters
  foreach(example ${PASTIX_DRIVERS} )
    foreach(arithm ${PASTIX_PRECISIONS} )
      set(factos ${PASTIX_FACTO})
      if (arithm IN_LIST _complex)
        list(APPEND factos 3 4)
      endif()
      foreach(facto ${factos} )
        set( _test_name ${version}_example_${example}_lap_${arithm}_facto${facto} )
        set( _test_cmd  ${exe} ./${example} -9 ${arithm}:10:10:10:2 -f ${facto} )
        # Let's avoid testing with diagonal factorizations and Schur complement
        if ( NOT((facto IN_LIST _factodiag) AND (example STREQUAL "schur")) )
          if (example STREQUAL "multidof")
            if ( arithm EQUAL d )
              add_test(${_test_name}_fix ${_test_cmd} -c 2)
              add_test(${_test_name}_var ${_test_cmd} -c 5)
            endif()
          else()
            if( NOT ((version STREQUAL "mpi") AND (example STREQUAL "reentrant")) )
              add_test(${_test_name} ${_test_cmd} -c 2 )
            endif()
          endif()
        endif()
      endforeach()
    endforeach()
  endforeach()

  ### Driver / order
  foreach(example ${PASTIX_TESTS} )
    foreach(order ${PASTIX_ORDER} )
      set( _test_name ${version}_example_${example}_${order} )
      set( _test_cmd  ${exe} ./${example} -i iparm_ordering ${order} )
      # RSA
      if (PASTIX_WITH_FORTRAN)
        add_test(${_test_name}_rsa ${_test_cmd} --rsa ${CMAKE_SOURCE_DIR}/test/matrix/small.rsa  -f 1 -d dparm_epsilon_magn_ctrl 1e-14)
      endif()
      # Matrix Market
      add_test(${_test_name}_mm  ${_test_cmd} --mm  ${CMAKE_SOURCE_DIR}/test/matrix/young4c.mtx  -f 1)
      # Harwell Boeing
      add_test(${_test_name}_hb  ${_test_cmd} --hb  ${CMAKE_SOURCE_DIR}/test/matrix/orsirr.rua   -f 2)
      # Matrix Market - Hermitian
      add_test(${_test_name}_mm2 ${_test_cmd} --mm  ${CMAKE_SOURCE_DIR}/test/matrix/mhd1280b.mtx -f 2)
    endforeach()
  endforeach()

  ### Refinement
  foreach(example ${PASTIX_TESTS} )
    set( _test_name ${version}_example_${example}_refine )
    set( _test_cmd  ${exe} ./${example} )
    add_test(${_test_name}_cg       ${_test_cmd} --hb ${CMAKE_SOURCE_DIR}/test/matrix/small.rsa  -f 1 -i iparm_refinement pastixrefinecg -d dparm_epsilon_magn_ctrl 1e-14)
    add_test(${_test_name}_gmres    ${_test_cmd} --hb ${CMAKE_SOURCE_DIR}/test/matrix/orsirr.rua -f 2 -i iparm_refinement pastixrefinegmres)
    add_test(${_test_name}_bicgstab ${_test_cmd} --hb ${CMAKE_SOURCE_DIR}/test/matrix/orsirr.rua -f 2 -i iparm_refinement pastixrefinebicgstab)
  endforeach()

  ### Refinement with Laplacian and default parameters
  foreach(example ${PASTIX_REFINE} )
    foreach(arithm ${PASTIX_PRECISIONS} )
      set( _test_name ${version}_example_${example}_lap_${arithm}_refine )
      set( _test_cmd_her  ${exe} ./${example} -x ${arithm}:10:10:10:2 )
      set( _test_cmd_sym  ${exe} ./${example} -9 ${arithm}:10:10:10:2 )
      if (arithm IN_LIST _complex)
        add_test(${_test_name}_cg_her       ${_test_cmd_her} -i iparm_refinement pastixrefinecg)
        add_test(${_test_name}_gmres_her    ${_test_cmd_her} -i iparm_refinement pastixrefinegmres)
        add_test(${_test_name}_bicgstab_her ${_test_cmd_her} -i iparm_refinement pastixrefinebicgstab)
      endif()
      add_test(${_test_name}_cg_sym       ${_test_cmd_sym} -i iparm_refinement pastixrefinecg)
      add_test(${_test_name}_gmres_sym    ${_test_cmd_sym} -i iparm_refinement pastixrefinegmres)
      add_test(${_test_name}_bicgstab_sym ${_test_cmd_sym} -i iparm_refinement pastixrefinebicgstab)
    endforeach()
  endforeach()

  ### Scheduling
  foreach(example ${PASTIX_TESTS} )
    foreach(scheduler ${PASTIX_SCHEDS} )
      foreach(arithm ${PASTIX_PRECISIONS} )
        set(factos ${PASTIX_FACTO})
        if (arithm IN_LIST _complex)
          list(APPEND factos 3 4)
        endif()
        foreach(facto ${factos} )
          set( _test_name ${version}_example_${example}_lap_${arithm}_facto${facto}_sched${scheduler} )
          set( _test_cmd  ${exe} ./${example} -9 ${arithm}:10:10:10:2 -s ${scheduler} -f ${facto} )
          # 1D
          add_test(${_test_name}_1d  ${_test_cmd} -i iparm_tasks2d_level 0)
          if ((scheduler EQUAL 2) OR (scheduler EQUAL 3))
            # 2D
            add_test(${_test_name}_2d   ${_test_cmd} -i iparm_tasks2d_width 0)
            # 1D/2D
            add_test(${_test_name}_1d2D ${_test_cmd} -i iparm_tasks2d_width 16)
          endif()
        endforeach()
      endforeach()
    endforeach()
  endforeach()

  # Low Rank, not in distributed
  foreach(example ${PASTIX_TESTS} )
    foreach(scheduler ${PASTIX_SCHEDS} )
      foreach(arithm ${PASTIX_PRECISIONS} )
        if (arithm IN_LIST _complex)
          list(APPEND factos 3 4)
        endif()
        foreach(facto ${factos} )
          foreach(method ${PASTIX_COMPRESS_METHOD} )
            foreach(split ${PASTIX_SPLIT_METHOD} )
              set( _lowrank_params -i iparm_compress_min_width 16 -i iparm_compress_min_height 16 -i iparm_splitting_strategy pastixsplit${split} -i iparm_compress_method pastixcompressmethod${method} )
              set( _test_name ${version}_example_${example}_lap_${arithm}_facto${facto}_sched${scheduler}_${split}_${method} )
              set( _test_cmd  ${exe} ./${example} -9 ${arithm}:10:10:10:2 -s ${scheduler} -f ${facto} ${_lowrank_params})

              # Begin
              add_test(${_test_name}begin ${_test_cmd} -i iparm_compress_when pastixcompresswhenbegin)
              add_test(${_test_name}end   ${_test_cmd} -i iparm_compress_when pastixcompresswhenend  )
              # End
            endforeach()
          endforeach()
        endforeach()
      endforeach()
    endforeach()
  endforeach()

endforeach()
